import numpy as np
import csv
import math
import matplotlib.pyplot as plt


def read_data_a(x):
    a_ls = []
    with open('./数据/Data' + x + '.csv') as fp:
        rows = csv.reader(fp)
        next(rows)  # 跳过首行
        for row in rows:
            ax = float(row[1])
            ay = float(row[2])
            az = float(row[3])
            a = math.sqrt(ax ** 2 + ay ** 2 + (az - 1) ** 2)
            a_ls.append(a)
    return a_ls


def read_data_w(x):
    w_ls = []
    with open('./数据/Data' + x + '.csv') as fp:
        rows = csv.reader(fp)
        next(rows)  # 跳过首行
        for row in rows:
            wx = float(row[4])
            wy = float(row[5])
            wz = float(row[6])
            w = math.sqrt(wx ** 2 + wy ** 2 + wz ** 2)
            w_ls.append(w)
    return w_ls


def read_label_of_data1_cross(cross):
    x_ls_mov = []
    with open('./数据/Label_of_Data1.csv') as fp:
        rows = csv.reader(fp)
        next(rows)
        cnt = 0
        for row in rows:
            if cnt % 2 == 1:
                x_ls_mov.append(row[cross])
            cnt += 1
    return x_ls_mov


def begin_and_end(a_ls, step):
    begin_ls = []
    end_ls = []
    begin_and_end_ls = []
    max_value = 0.05
    for i in range(step, len(a_ls)//5):
        cnt = 0
        for j in range(step):
            if a_ls[i-j] < max_value:
                cnt += 1
        if cnt >= step*9/10:
            begin_ls.append(i)
    for i in range(len(a_ls)-step - 1, len(a_ls)*4//5, -1):
        cnt = 0
        for j in range(step):
            if a_ls[i+j] < max_value:
                cnt += 1
        if cnt >= step*9/10:
            end_ls.append(i)
    begin_and_end_ls.append(max(begin_ls))
    begin_and_end_ls.append(min(end_ls))
    return begin_and_end_ls


file_num = '1'
a_ls = read_data_a(file_num)
w_ls = read_data_w(file_num)
x_ls = range(len(a_ls))
w_max = max(w_ls)
# 把角速度归一化
nor_w_ls = []
# 角速度系数
coefficient = 0
for i in range(len(w_ls)):
    nor_w_ls.append(w_ls[i]/w_max)
    a_ls[i] += nor_w_ls[i] * coefficient

step = 200
begin_and_end_ls = begin_and_end(a_ls, step)
x_start = begin_and_end_ls[0]
print('加速度开始变化点: ', x_start)
x_end = begin_and_end_ls[1]
print('加速度结束变化点: ', x_end)


# 非对称滑动平均滤波, 滑块在数据点后, 数据块数为slide_step
slide_step = 210
x_slide_ls = range(len(a_ls))
a_slide_ls = []
for i in x_slide_ls:
    if x_start <= i < len(a_ls) - slide_step:
        sum_a = 0
        for j in range(slide_step):
            sum_a += a_ls[i + j] / slide_step
        a_slide_ls.append(sum_a)
    else:
        a_slide_ls.append(0)


# 取+-arrange范围内的极值点
arrange = 230
x_ls_local_max_a_slide_ls, x_ls_local_min_a_slide_ls = range(63), range(63)
# while not(len(x_ls_local_max_a_slide_ls) <= 62 and len(x_ls_local_min_a_slide_ls) <= 62):
while not(len(x_ls_local_max_a_slide_ls) <= 62):
    x_ls_local_max_a_slide_ls, x_ls_local_min_a_slide_ls = [], []
    for i in range(x_start, x_end):
        if arrange + x_start <= i < x_end - arrange:
            max_flag, min_flag = 1, 1
            for j in range(-arrange, arrange):
                if a_slide_ls[i] < a_slide_ls[i + j]:
                    max_flag = 0
                    break
            for j in range(-arrange, arrange):
                if a_slide_ls[i] > a_slide_ls[i + j]:
                    min_flag = 0
                    break
            if max_flag == 1:
                x_ls_local_max_a_slide_ls.append(i)
                i += arrange
            if min_flag == 1:
                x_ls_local_min_a_slide_ls.append(i)
                i += arrange
    print('当前: ')
    print('arrange = ', arrange)
    print('极大值点列表长度: ', len(x_ls_local_max_a_slide_ls), '极小值点列表长度', len(x_ls_local_min_a_slide_ls))
    arrange += 10


local_max_a_slide_arr = np.array(a_slide_ls)[x_ls_local_max_a_slide_ls]
local_min_a_slide_arr = np.array(a_slide_ls)[x_ls_local_min_a_slide_ls]


# a-t函数
plt.plot(x_ls, a_ls, linewidth='0.5')
# 滑动处理后a-t函数
plt.plot(x_slide_ls, a_slide_ls, linewidth='0.5')
# 绿点表示极大值点
plt.scatter(x_ls_local_max_a_slide_ls, local_max_a_slide_arr, c='green', s=10)
# 紫点表示极小值点
plt.scatter(x_ls_local_min_a_slide_ls, local_min_a_slide_arr, c='purple', s=10)


print('预测起始点列表:')
print('长度: ', len(x_ls_local_max_a_slide_ls))
print(x_ls_local_max_a_slide_ls)
print('预测终止点列表:')
print('长度: ', len(x_ls_local_min_a_slide_ls))
print(x_ls_local_min_a_slide_ls)

result = open('predict_of_data' + file_num + '.xls', 'w', encoding='gbk')
result.write('pre_start%.1f%d/%d' % (coefficient, slide_step, arrange))
result.write('\n')
for i in range(0, len(x_ls_local_max_a_slide_ls)):
    result.write(str(x_ls_local_max_a_slide_ls[i]))
    result.write('\n')  # '\n'表示每写入一个元素后，会移动到同列的下一个单元格
result.write('\n')
# result.write('pre_end%.1f%d/%d' % (coefficient, slide_step, arrange))
# result.write('\n')
# for i in range(0, len(x_ls_local_min_a_slide_ls)):
#     result.write(str(x_ls_local_min_a_slide_ls[i]))
#     result.write('\n')  # '\n'表示每写入一个元素后，会移动到同列的下一个单元格
result.close()
# plt.show()
